// SERVER, ORGANIZER
module.exports = async (body, user) => {
    const Competition_Model = require('../../models/Competition')

    // 1. validate body
    const create_competition_validator = require('../../validators/requests/api/competition/create')
    try { await create_competition_validator.validateAsync(body) }
    catch (err) { return { code: 400, data: err.details } }

    // 2. arrayize
    body = Array.isArray(body) ? body : [body]

    // 3. authorize {body, user}
    const authorizer = require('../../authorizers/competition')
    const authorizer_results = body.map(competition => authorizer(competition, 'create', user))
    const violation = authorizer_results.find(result => !result.authorized)
    if (violation) { return { code: 403, data: violation.message } }

    // 4. check_dependencies : will the database be consistent if i create this document?
    // because competition has no dependencies, i should only check uniqueness,
    // but there is no unique field. so nothing needs to be done.

    // 5. prepare
    const fs_promises = require('fs').promises
    const default_product_category_tree = require('../../static/product_category_tree.json')
    const default_certificate_template_buffer = await fs_promises.readFile('../../static/default_certificate_template.docx')
    const default_certificate_template = {
        name: 'default_certificate_template.docx',
        mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        buffer: default_certificate_template_buffer,
        size: default_certificate_template_buffer.length
    }

    const now = Date.now

    const _competitions = body.map(competition => ({
        ...competition,
        creation_date: now, // just to match the other dates.
        ...(competition.entry_opened && { last_entry_open_date: now }),
        // last_entry_close_date will be undefined
        ...(competition.competition_opened && { last_competition_open_date: now }),
        // last_competition_close_date will be undefined
        // archived will be generated by model
        // archival_date will be undefined
        // payment_needed, association_members_need_to_pay, entry_fee_amount, entry_fee_currency is OK
        ...(!(competition.product_category_tree ?? false) && { product_category_tree: default_product_category_tree }),
        ...(!(competition.certificate_template ?? false) && { certificate_template: default_certificate_template }),
        // ignore_extreme_values will be false if undefined
    }))

    // 6. create
    const competitions = _competitions.map(competition => new Competition_Model(competition))

    // 7. validate_documents
    const competition_validator = require('../../validators/schemas/Competition')
    try {
        const validator_promises = competitions.map(competition => competition_validator.validateAsync(competition))
        await Promise.all(validator_promises)
    } catch (err) { return { code: 400, data: err.details } }

    // 8. update_dependents
    // only dependent: Product. but at creation nothing needs to be updated.

    // 9. save
    const saver_promises = competitions.map(competition => competition.save())
    await Promise.all(saver_promises)

    // 10. reply
    return {
        code: 201,
        data: undefined // TODO, check if it works if i leave it out, etc.
    }
}