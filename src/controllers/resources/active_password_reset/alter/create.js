const create = async (active_password_reset, actor, session) => {

    const Active_Password_Reset_Model = require('../../../../models/Active_Password_Reset')
    const active_password_reset_validator = require('../../../../validators/schemas/models/Active_Password_Reset')
    const find_user = require('../find')('user')

    const randomstring = require('randomstring')
    const created_active_password_resets = []

    for (const active_password_reset of active_password_resets) {
        // 1. Check dependencies
        // Dependencies: [Active_Password_Reset, User]

        // Provided user_id should belong to an existing User.
        const user_of_active_password_reset = (await find_user(
            { filter: { _id: active_password_reset.user_id.toString() } },
            actor, session
        ))?.data?.[0] ?? null

        if (!user_of_active_password_reset) {
            return {
                code: 403,
                json: {
                    message: `check_dependency_error`,
                    details: {
                        entity: 'active_password_reset',
                        dependency: 'user',
                        data: active_password_reset,
                        error: 'provided_user_id_does_not_belong_to_an_existing_user'
                    }
                }
            }
        }

        // 2. Create locally
        let restore_id
        do {
            restore_id = randomstring.generate({
                length: 32,
                charset: 'alphanumeric',
                capitalization: 'lowercase',
            })
        } while (
            (await Active_Password_Reset_Model.exists({
                restore_id: restore_id,
            }, { session: session }))
            ||
            active_password_resets.some((active_password_reset) => active_password_reset.restore_id === restore_id)
        )

        const active_password_reset = new Active_Password_Reset_Model({
            user_id: active_password_reset.user_id,
            restore_id: restore_id,
            // expiring_started is autogenerated by model
        })

        // 3. Validate created document
        try {
            await active_password_reset_validator.validateAsync(active_password_reset)
        } catch (error) {
            return {
                code: 400,
                json: {
                    message: `create_model_validation_error`,
                    details: {
                        entity: 'active_password_reset',
                        data: active_password_reset,
                        error: error.details
                    }
                }
            }
        }

        // 4. Save created document
        const created_active_password_reset = await active_password_reset.save({ session: session })
        created_active_password_resets.push(created_active_password_reset)

        // 5. Update dependents
        // Nothing needs to be updated
    }

    // 6. Reply
    return {
        code: 201,
        data: created_active_password_resets,
    }

}

module.exports = create